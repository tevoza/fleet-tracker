@model List<TruckerLog>
@{
    ViewData["Title"] = "View Trucker";
}

<script src="~/lib/chartjs/dist/chart.min.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<div class = "page-content">

  <div class="sidebar">
    <partial name="_Fleet" />
  </div>

  <div class="text-center">
    <h1>VIEW TRIP - @Model.Count logs:  @DateTimeOffset.FromUnixTimeSeconds(@Model.First().TimeStamp).LocalDateTime - @DateTimeOffset.FromUnixTimeSeconds(@Model.Last().TimeStamp).LocalDateTime </h1>

    <h2>Time plot</h2>
    <div>
      <canvas id="myChart" width="100%" height="30px" style="background-color: #EEF5DB;"></canvas>
    </div>

    <h2>Percentile Distribution</h2>
    <div>
      <canvas id="myPercentile" width="100%" height="30px" style="background-color: #EEF5DB;"></canvas>
    <div>
</div>
<script>
var points = JSON.parse('@Json.Serialize(Model)');

let time = points.map(a => new Date(a.timeStamp*1000).toTimeString().split(" ")[0]);
let speed = points.map(a => a.speed);
let accel = points.map(a => a.acceleration);
let altitude = points.map(a => a.altitude);

const data = {
  labels: time,
  datasets: [{
    label: 'Speed',
    backgroundColor: 'rgb(52, 204, 235)',
    borderColor: 'rgb(52, 204, 235)',
    data: speed
  },
  {
    label: 'Acceleration',
    backgroundColor: 'rgb(255, 0, 0)',
    borderColor: 'rgb(255, 0, 0)',
    data: accel
  },
  {
    label: 'Altitude',
    backgroundColor: 'rgb(0, 255, 0)',
    borderColor: 'rgb(0, 255, 0)',
    data: altitude,
    hidden: true
  }
  ]
};

var config = {
  type: 'line',
  data: data,
  options: {
    scales: {
      x: {
        ticks: {
          font: {
            size: 20,
            weight: 900
          }
        },
        title: {
          display: true,
          text: 'Time',
          font: {
            size: 25,
            weight: 900
          }
        }
      },
      y: {
        ticks: {
          font: {
            size: 20,
            weight: 900
          }
        },
        title: {
          display: true,
          text: 'Speed[km/h]/Accel[m/s^2]/Altitude[m]',
          font: {
            size: 15,
            weight: 900
          }
        }
      }
    }
  }
};

var myChart = new Chart(
    document.getElementById('myChart'),
    config
);

//percentiles
function linspace(start, stop, num, endpoint = true) {
    const div = endpoint ? (num - 1) : num;
    const step = (stop - start) / div;
    return Array.from({length: num}, (_, i) => start + step * i);
}

//deepcopies
speed_c     = jQuery.extend(true, [], speed)
accel_c     = jQuery.extend(true, [], accel)
altitude_c  = jQuery.extend(true, [], altitude) 

var speedSorted  = speed_c.sort(function(a, b){return a - b}); 
var accelSorted  = accel_c.sort(function(a, b){return a - b}); 
var altSorted  = altitude_c.sort(function(a, b){return a - b}); 

var x = linspace(0, 100, speedSorted.length)
x = x.map(x => x.toFixed(1))
console.log(speed)

const percentile_data = {
  labels: x,
  datasets: [{
    label: 'Speed',
    backgroundColor: 'rgb(52, 204, 235)',
    borderColor: 'rgb(52, 204, 235)',
    data: speedSorted
  },
  {
    label: 'Acceleration',
    backgroundColor: 'rgb(255, 0, 0)',
    borderColor: 'rgb(255, 0, 0)',
    data: accelSorted
  },
  {
    label: 'Altitude',
    backgroundColor: 'rgb(0, 255, 0)',
    borderColor: 'rgb(0, 255, 0)',
    data: altSorted,
    hidden: true
  }
  ]
};

const percentile_config = {
  type: 'line',
  data: percentile_data,
  options: {
    scales: {
      x: {
        ticks: {
          font: {
            size: 20,
            weight: 900
          }
        },
        title: {
          display: true,
          text: 'Percentile [%]',
          font: {
            size: 25,
            weight: 900
          }
        }
      },
      y: {
        ticks: {
          font: {
            size: 20,
            weight: 900
          }
        },
        title: {
          display: true,
          text: 'Speed[km/h]/Accel[m/s^2]',
          font: {
            size: 15,
            weight: 900
          }
        }
      }
    }
  }
};

var percentile_plot = new Chart(
    document.getElementById('myPercentile'),
    percentile_config 
);
</script>