@model FleetTracker.ViewModels.ViewTruckerViewModel
@{
    ViewData["Title"] = "View Trucker";
}

<partial name="_Fleet" />
<script async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLmGWYDTXI7OofhF5y2_jetVhTOku4pwk&callback=initMap">
</script>

<div id="map"> </div>

<div class="text-center">
    <h1>@Model.Trucker.Name</h1>
    <table style="width: 100%;">
        <tr>
            <th>Delay(minutes)</th>
            <th>Start</th>
            <th>Departed</th>
            <th>Travel Time</th>
            <th>Logs recorded</th>
            <th>Max Speed</th>
            <th>Average Speed</th>
            <th>Speed limit broken</th>
        </tr>

    @for (var i = 0; i < Model.Segments.Count; i++)
    {
        <tr>
            <td style="color: red;">@(Model.Segments[i].Delay/60)</td>
            <td>@DateTimeOffset.FromUnixTimeSeconds(Model.Segments[i].StartTime).LocalDateTime</td>
            <td>@DateTimeOffset.FromUnixTimeSeconds(Model.Segments[i].StopTime).LocalDateTime</td>
            <td>@Model.Segments[i].TravelTime</td>
            <td>@Model.Segments[i].points</td>
            <td>@Model.Segments[i].MaxSpeed</td>
            <td>@Model.Segments[i].AvgSpeed</td>
            <td>@Model.Segments[i].MaxSpeedBreaks</td>
        </tr>
    }
    </table>

</div>

<script>
var points = JSON.parse('@Json.Serialize(Model.AggregatedLogs.Select(s=>new { time=s.TimeStamp, lat = s.Latitude, lng = s.Longitude }).ToList())');
var stops = JSON.parse('@Json.Serialize(Model.StopLogs.Select(s=>new { time=s.TimeStamp, lat = s.Latitude, lng = s.Longitude }).ToList())');
var markers = JSON.parse('@Json.Serialize(Model.Segments)');
console.log(markers);

const points_coords = points.map(item => {
    const container = {};
    container["lat"] = item.lat;
    container["lng"] = item.lng;
    return container;
});

function initMap(){
    const map = new google.maps.Map(document.getElementById('map'), {
        center: points_coords[0],
        zoom: 11
    });

    const lineSymbol = {
        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
    };

    const path = new google.maps.Polyline({
        path: points_coords,
        icons: [
            {
                icon: lineSymbol,
                offset: "100%",
                repeat: "50px"
            },
        ],
        geodesic: true,
        strokeColor: "#00FF00",
        strokeOpacity: 1.0,
        strokeWeight: 2,
      });
      path.setMap(map);

    //stop points
    var i, k, arrived, info, arrivedDate, arrivedTime, depart, departTime, departDate, departIndex;
    for (i = 0; i<stops.length; i++){
        arrived = new Date(stops[i]['time']*1000);
        arrivedDate = arrived.toLocaleDateString("en-US");
        arrivedTime = arrived.toLocaleTimeString("en-US");

        if ((i < stops.length -1) || (stops.length == 1)){
            departIndex = points.map(function(e) { return e.time; }).indexOf(stops[i]["time"])+1;
            depart= new Date(points[departIndex]["time"]*1000);
            stopTime = Math.round((depart - arrived)/1000/60);
            console.log(stopTime);

            departDate = depart.toLocaleDateString("en-US");
            departTime = depart.toLocaleTimeString("en-US");
            info =  stopTime + " minutes\n" +
                    "Arrived: (" + arrivedDate+") " + arrivedTime +
                    "\nDepart: (" + departDate +") " +  departTime;
        } else {
            info =  "Arrived: (" + arrivedDate+") " + arrivedTime;
        }

        var marker = new google.maps.Marker({
            position : new google.maps.LatLng ( stops[i]['lat'], stops[i]['lng'] ),
            title : info
        });

        var infoWindow = new google.maps.InfoWindow({
            content : info
        })

        marker.setMap(map);
    }
}

</script>