@model FleetTracker.ViewModels.ViewTruckerViewModel
@{
    ViewData["Title"] = "View Trucker";
}

<script async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBLmGWYDTXI7OofhF5y2_jetVhTOku4pwk&callback=initMap">
</script>

<div class = "page-content">

    <div class="sidebar">
        <partial name="_Fleet" />
    </div>


    <div class="text-center">
        <h1>@Model.Trucker.Name</h1>

        <form method="GET">
            <label for="upTillDate">Date:</label>
            <input id="upTillDate" name="upTillDate" type="date" />

            <label for="daysBefore">Days:</label>
            <input id="daysBefore" name="daysBefore" type="number" value="3"/>

            <input type="submit" class="btn-primary" value="Update"/>
        </form>

        <div id="map"></div>

        <div class="table table-dark table-striped">
            <table style="width: 100%;">
                <tr>
                    <th>Delay(minutes)</th>
                    <th>Departure</th>
                    <th>Arrival</th>
                    <th>Travel Time</th>
                    <th>Logs recorded</th>
                    <th>Max Speed</th>
                    <th>Average Speed</th>
                    <th>Speed limit broken</th>
                    <th>Details</th>
                </tr>

            @for (var i = 0; i < Model.Segments.Count; i++)
            {
                <tr>
                    <td style="color: red;">@(Model.Segments[i].Delay/60)</td>
                    <td>@DateTimeOffset.FromUnixTimeSeconds(Model.Segments[i].StartTime).LocalDateTime</td>
                    <td>@DateTimeOffset.FromUnixTimeSeconds(Model.Segments[i].StopTime).LocalDateTime</td>
                    <td>@(Model.Segments[i].TravelTime/60)</td>
                    <td>@Model.Segments[i].Points</td>
                    <td>@Model.Segments[i].MaxSpeed</td>
                    <td>@Model.Segments[i].AvgSpeed</td>
                    <td>@Model.Segments[i].MaxSpeedBreaks</td>
                    <td>@Html.ActionLink("Info", "ViewTrip", "Fleet",@Model.Segments[i],null) </td>
                </tr>
            }
            </table>
        </div>
    </div>

</div>

<script>
var points = JSON.parse('@Json.Serialize(Model.TruckerLogs.ToList())');
var segments = JSON.parse('@Json.Serialize(Model.Segments)');
var upperDate = JSON.parse('@Json.Serialize(Model.UpperTime)');
var daysBefore  = JSON.parse('@Json.Serialize(Model.DaysDisplay)');
var maxSpeed = JSON.parse('@Json.Serialize(Model.Manager.MaxSpeed)');

var uDate = new Date(upperDate*1000).toISOString().split('T')[0];
document.getElementById("upTillDate").value = uDate;
document.getElementById("daysBefore").value = daysBefore;

//options{log,  arriveTime, departTime, delay}
function makeMarker(options)
{
    var dateOptions = {year:'numeric', month:'numeric', day:'numeric',  hour: '2-digit', minute:'2-digit'};
    var info = "";
    if (options.delay != null) {
        info += "Delay: " + (options.delay/60) + " minutes\n";
    }

    if (options.arriveTime != null) {
        var arriveDate = new Date(options.arriveTime*1000);
        info += "Arrived: "+ arriveDate.toLocaleTimeString([], dateOptions) + "\n";
    }

    if (options.departTime != null) {
        var departDate = new Date(options.departTime*1000);
        info += "Departure: " + departDate.toLocaleTimeString([], dateOptions) + "\n";
    }

    var m = new google.maps.Marker ({
            position: new google.maps.LatLng ( options.log.latitude, options.log.longitude ),
            title: info
        });
    return m;
}

function sketchRoute(map, seg)
{
    const lineSymbol = {
        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
    };
    const VALID_COLOR       = "#00FF00";
    const MAX_SPEED_COLOR   = "#FF0000";
    
    var path = [
        {lat: seg.pinStart.latitude, lng: seg.pinStart.longitude},
        {lat: seg.logStart.latitude, lng: seg.logStart.longitude}
    ];

    var line = new google.maps.Polyline({
        path: path,
        geodesic: true,
        strokeColor: VALID_COLOR,
        strokeOpacity: 1.0,
        strokeWeight: 2,
        icons: [
            {
                icon: lineSymbol,
                offset: "100%",
            },
        ],
        map: map,
        title: "lol"
    });

    let segPoints = points.filter(t => t.timeStamp >= seg.logStart.timeStamp && t.timeStamp <= seg.logStop.timeStamp);
    console.log(segPoints);
    for (var i = 1; i < segPoints.length; i++){
        var path = [
            {lat: segPoints[i-1].latitude, lng: segPoints[i-1].longitude},
            {lat: segPoints[i].latitude, lng: segPoints[i].longitude},
        ];

        var color =  segPoints[i].speed <= maxSpeed ? VALID_COLOR : MAX_SPEED_COLOR;

        var line = new google.maps.Polyline({
            path: path,
            geodesic: true,
            strokeColor: color,
            strokeOpacity: 1.0,
            strokeWeight: 2,
            icons: [
                {
                    icon: lineSymbol,
                    offset: "100%",
                },
            ],
            map: map
        });
    }

    return;
}

function initMap(){
    const map = new google.maps.Map(document.getElementById('map'), {
        center: (points.length == 0 ? {lat:-26.2, lng:28} : {lat: points[0].latitude, lng: points[0].longitude }),
        zoom: 11
    });

    var markerOptions, marker;
    for (var i = 0; i < segments.length; i++)
    {
        //logic for adding markers
        if (i == 0){
            markerOptions = {
                log:        segments[i].pinStart, 
                arriveTime: null,
                departTime: segments[i].logStart.timeStamp, 
                delay:      null
            };
            marker = makeMarker(markerOptions);
            marker.setMap(map);
        }
        if (i >= 1) {
            markerOptions = {
                log:        segments[i].pinStart, 
                arriveTime: segments[i].pinStart.timeStamp,
                departTime: segments[i].logStart.timeStamp,
                delay:      segments[i].delay
            };
            marker = makeMarker(markerOptions);
            marker.setMap(map);
        }
        if (i == segments.length-1) {
            markerOptions = {
                log:        segments[i].logStop, 
                arriveTime: segments[i].logStop.timeStamp,
                departTime: null,
                delay:      null
            };
            marker = makeMarker(markerOptions);
            marker.setMap(map);
        }
        sketchRoute(map, segments[i])
    }
}
</script>